import type { Metadata, Viewport } from "next";
import "./globals.css";
import localFont from "next/font/local";
import AuthProvider from "@/Providers/AuthProvider";
import { getUserLoginInfo } from "@/service/utils/serverAuth";
import { SettingProps, getSiteSetting } from "@/service/api/setting";

export const metadata: Metadata = {
  title: "Sun Beauty",
  description: "Generated by create next app",
};
const myFont = localFont({
  src: [
    {
      path: "./PeydaWebFaNum-Thin.woff2",
      weight: "100",
      style: "normal",
    },
    {
      path: "./PeydaWebFaNum-ExtraLight.woff2",
      weight: "200",
      style: "normal",
    },
    {
      path: "./PeydaWebFaNum-Light.woff2",
      weight: "300",
      style: "normal",
    },
    {
      path: "./PeydaWebFaNum-Regular.woff2",
      weight: "400",
      style: "normal",
    },
    {
      path: "./PeydaWebFaNum-Medium.woff2",
      weight: "500",
      style: "normal",
    },
    {
      path: "./PeydaWebFaNum-SemiBold.woff2",
      weight: "600",
      style: "normal",
    },
    {
      path: "./PeydaWebFaNum-Bold.woff2",
      weight: "700",
      style: "normal",
    },
    {
      path: "./PeydaWebFaNum-ExtraBold.woff2",
      weight: "800",
      style: "normal",
    },
    {
      path: "./PeydaWebFaNum-Black.woff2",
      weight: "900",
      style: "normal",
    },
  ],
});
export const viewport: Viewport = {
  viewportFit: "cover",
  width: "device-width",
  initialScale: 1,
  minimumScale: 1,
  maximumScale: 1,
  userScalable: false,
};
export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const userInfo = await getUserLoginInfo();
  const siteSetting = await getSiteSetting(1);
  let parseSetting: SettingProps | undefined;
  try {
    parseSetting = JSON.parse(siteSetting?.entity?.settings?.[0]?.value ?? "");
  } catch (error) {}

  return (
    <html lang="fa" dir="rtl" className="w-full h-full bg-gray-200" style={{}}>
      <head>
        <style>
          {`
    :root {
  --primary: ${parseSetting?.setting?.primaryColor};
  --primary-rgb: ${parseSetting?.setting?.primaryColorRgb};
  --secondary: ${parseSetting?.setting?.secondaryColor};
  --secondary-rgb: ${parseSetting?.setting?.secondaryColorRgb};
}
    `}
        </style>
      </head>
      <body className={`${myFont.className} overflow-y-auto w-full h-full`}>
        <AuthProvider userInfo={userInfo?.payload}>{children}</AuthProvider>
      </body>
    </html>
  );
}
